// This is a sample configuration for using pi-blaster
// Assuming pi-blaster is running (and up to date) it will drive 4 RGB Leds
// with 12 GPIO lines

{
	"device" :
	{
		"name"       : "MyPi",
		"type"       : "piblaster",
		"output"       : "/dev/pi-blaster",
		"gpiomap"	:
		[
			{ "gpio" : 04, "ledindex" : 0, "ledcolor" : "r" },
			{ "gpio" : 17, "ledindex" : 0, "ledcolor" : "g" },
			{ "gpio" : 18, "ledindex" : 0, "ledcolor" : "b" },
			{ "gpio" : 27, "ledindex" : 1, "ledcolor" : "r" },
			{ "gpio" : 21, "ledindex" : 1, "ledcolor" : "g" },
			{ "gpio" : 22, "ledindex" : 1, "ledcolor" : "b" },
			{ "gpio" : 23, "ledindex" : 2, "ledcolor" : "r" },
			{ "gpio" : 24, "ledindex" : 2, "ledcolor" : "g" },
			{ "gpio" : 25, "ledindex" : 2, "ledcolor" : "b" },
			{ "gpio" : 10, "ledindex" : 3, "ledcolor" : "r" },
			{ "gpio" : 09, "ledindex" : 3, "ledcolor" : "g" },
			{ "gpio" : 11, "ledindex" : 3, "ledcolor" : "b" }
		],
	},

	"color" :
	{
		"transform" :
		[
			{
				"id"   : "default",
				"leds" : "*",
				"hsv" :
				{
					"saturationGain" : 1.0000,
					"valueGain"      : 1.0000 
				},
				"red" :
				{
					"threshold"  : 0.0000,
					"gamma"      : 1.0000,
					"blacklevel" : 0.0000,
					"whitelevel" : 1.0000
				},
				"green" :
				{
					"threshold"  : 0.0000,
					"gamma"      : 1.0000,
					"blacklevel" : 0.0000,
					"whitelevel" : 1.0000
				},
				"blue" :
				{
					"threshold"  : 0.0000,
					"gamma"      : 1.0000,
					"blacklevel" : 0.0000,
					"whitelevel" : 1.0000
				}
			}
		],
		"smoothing" :
		{
			"type"            : "none",
			"time_ms"         : 200,
			"updateFrequency" : 20.0000,
			"updateDelay"     : 0
		}
	},

	///  The configuration for each individual led. This contains the specification of the area 
	///  averaged of an input image for each led to determine its color. Each item in the list 
	///  contains the following fields:
	///  * index: The index of the led. This determines its location in the string of leds; zero 
	///           being the first led.
	///  * hscan: The fractional part of the image along the horizontal used for the averaging 
	///           (minimum and maximum inclusive)
	///  * vscan: The fractional part of the image along the vertical used for the averaging 
	///           (minimum and maximum inclusive)
	"leds" : 
	[
		{ "index" : 0, "hscan" : { "minimum" : 0.000, "maximum" : 0.250 }, "vscan" : { "minimum" : 0.000, "maximum" : 1.0 } }, 
		{ "index" : 1, "hscan" : { "minimum" : 0.250, "maximum" : 0.500 }, "vscan" : { "minimum" : 0.000, "maximum" : 1.000 } }, 
		{ "index" : 2, "hscan" : { "minimum" : 0.500, "maximum" : 0.750 }, "vscan" : { "minimum" : 0.000, "maximum" : 1.000 } }, 
		{ "index" : 3, "hscan" : { "minimum" : 0.750, "maximum" : 1.000 }, "vscan" : { "minimum" : 0.000, "maximum" : 1.000 } }
	],

	/// The black border configuration, contains the following items: 
	///  * enable    : true if the detector should be activated
	///  * threshold : Value below which a pixel is regarded as black (value between 0.0 and 1.0)
	"blackborderdetector" : 
	{
		"enable" : true,
		"threshold" : 0.01
	},

	/// The configuration of the effect engine, contains the following items: 
	///  * paths        : An array with absolute location(s) of directories with effects 
	///  * bootsequence : The effect selected as 'boot sequence'
	"effects" : 
	{
		"paths" : 
		[
			"/opt/hyperion/effects"
		]
	},

	"bootsequence" : 
	{
		"effect" : "Rainbow swirl fast",
		"duration_ms" : 3000,
		"priority" : 200
	},

	///  The configuration for the frame-grabber, contains the following items: 
	///   * width        : The width of the grabbed frames [pixels]
	///   * height       : The height of the grabbed frames [pixels]
	///   * frequency_Hz : The frequency of the frame grab [Hz]
	"framegrabber" : 
	{
		"width" : 64, "height" : 64, "frequency_Hz" : 25.0
	},

	/// The configuration of the XBMC connection used to enable and disable the frame-grabber. Contains the following fields: 
	///  * xbmcAddress       : The IP address of the XBMC-host
	///  * xbmcTcpPort       : The TCP-port of the XBMC-server
	///  * grabVideo         : Flag indicating that the frame-grabber is on(true) during video playback
	///  * grabPictures      : Flag indicating that the frame-grabber is on(true) during picture show
	///  * grabAudio         : Flag indicating that the frame-grabber is on(true) during audio playback
	///  * grabMenu          : Flag indicating that the frame-grabber is on(true) in the XBMC menu
	///  * grabScreensaver   : Flag indicating that the frame-grabber is on(true) when XBMC is on screensaver
	///  * enable3DDetection : Flag indicating that the frame-grabber should switch to a 3D compatible modus if a 3D video is playing
	"xbmcVideoChecker" : 
	{
		"xbmcAddress" : "127.0.0.1",
		"xbmcTcpPort" : 9090,
		"grabVideo" : true,
		"grabPictures" : true,
		"grabAudio" : true,
		"grabMenu" : true,
		"grabScreensaver" : true,
		"enable3DDetection" : true
	},

	/// The configuration of the Json server which enables the json remote interface
	///  * port : Port at which the json server is started
	"jsonServer" : 
	{
		"port" : 19444
	},

	/// The configuration of the Proto server which enables the protobuffer remote interface
	///  * port : Port at which the protobuffer server is started
	"protoServer" : 
	{
		"port" : 19445
	},

	/// The configuration of the boblight server which enables the boblight remote interface
	///  * port : Port at which the boblight server is started
// 	"boblightServer" : 
// 	{
// 		"port" : 19333
// 	},

	"endOfJson" : "endOfJson"
}
