// Automatically generated configuration file for 'Hyperion daemon'
// Generated by: HyperCon (The Hyperion deamon configuration file builder)
// Created with HyperCon V1.00.0 (11.03.2016)

{
	/// Device configuration contains the following fields: 
	/// * 'name'       : The user friendly name of the device (only used for display purposes)
	/// * 'type'       : The type of the device or leds (known types for now are
	/// APA102, Adalight, AdalightAPA102, AmbiLed, Atmo, Hyperion-USBASP-WS2801, Hyperion-USBASP-WS2812, Lightberry, Lightpack, LPD6803, LPD8806, Multi-Lightpack, P9813, Paintpack, PhilipsHUE, PiBlaster, SEDU, Test, ThinkerForge, TPM2, WS2801, WS2812b, None)
	/// * [device type specific configuration]
	/// * 'colorOrder' : The order of the color bytes ('rgb', 'rbg', 'bgr', etc.).
	///
	/// * 'Specific for AtmoOrb:
	/// * 'transitiontime'	 : Set the time of transition between color of Orb (not implemented)
	/// * 'port'  		 : Multicast UDP port
	/// * 'numLeds'	 : Number of leds in Orb
	/// * 'orbIds'	 : The Orb ids to use 
	/// * 'switchOffOnBlack': Define if Orb is to switch off when black is detected 
	"device" :
	{	
		"name"       : "MyPi",
		"type"       : "atmoorb",
		"output"     : "239.15.18.2",
		"transitiontime"     : 0,
		"port"     : 49692,
		"numLeds"     : 24,
		"orbIds"   : "1",
		"switchOffOnBlack"     : true,
		"colorOrder" : "rgb"
	},

	/// Color manipulation configuration used to tune the output colors to specific surroundings. 
	/// The configuration contains a list of color-transforms. Each transform contains the 
	/// following fields:
	///  * 'id'   : The unique identifier of the color transformation (eg 'device_1')	///  * 'leds' : The indices (or index ranges) of the leds to which this color transform applies
	///             (eg '0-5, 9, 11, 12-17'). The indices are zero based.	///  * 'hsv' : The manipulation in the Hue-Saturation-Value color domain with the following 
	///            tuning parameters:
	///            - 'saturationGain'  The gain adjustement of the saturation
	///            - 'valueGain'       The gain adjustement of the value
	///  * 'red'/'green'/'blue' : The manipulation in the Red-Green-Blue color domain with the 
	///                           following tuning parameters for each channel:
	///            - 'threshold'       The minimum required input value for the channel to be on 
	///                                (else zero)
	///            - 'gamma'           The gamma-curve correction factor
	///            - 'blacklevel'      The lowest possible value (when the channel is black)
	///            - 'whitelevel'      The highest possible value (when the channel is white)
	///
	/// Next to the list with color transforms there is also a smoothing option.
	///  * 'smoothing' : Smoothing of the colors in the time-domain with the following tuning 
	///                  parameters:
	///            - 'type'            The type of smoothing algorithm ('linear' or 'none')
	///            - 'time_ms'         The time constant for smoothing algorithm in milliseconds
	///            - 'updateFrequency' The update frequency of the leds in Hz
	///            - 'updateDelay'     The delay of the output to leds (in periods of smoothing)
	"color" :
	{
		"transform" :
		[
			{
				"id"   : "default",
				"leds" : "*",
				"hsv" :
				{
					"saturationGain" : 1.0000,
					"valueGain"      : 1.0000
				},
				"red" :
				{
					"threshold"  : 0.0000,
					"gamma"      : 2.2000,
					"blacklevel" : 0.0000,
					"whitelevel" : 1.0000
				},
				"green" :
				{
					"threshold"  : 0.0000,
					"gamma"      : 2.2000,
					"blacklevel" : 0.0000,
					"whitelevel" : 1.0000
				},
				"blue" :
				{
					"threshold"  : 0.0000,
					"gamma"      : 2.2000,
					"blacklevel" : 0.0000,
					"whitelevel" : 1.0000
				}
			}
		],
		"smoothing" :
		{
			"type"            : "linear",
			"time_ms"         : 100,
			"updateFrequency" : 60.0000,
			"updateDelay"     : 0
		}
	},

	/// The black border configuration, contains the following items: 
	///  * enable    			: true if the detector should be activated
	///  * threshold 			: Value below which a pixel is regarded as black (value between 0.0 and 1.0)
	///  * unknownFrameCnt		: Number of frames without any detection before the border is set to 0 (default 600)
	///  * borderFrameCnt		: Number of frames before a consistent detected border gets set (default 50)
	///  * maxInconsistentCnt 	: Number of inconsistent frames that are ignored before a new border gets a chance to proof consistency
	///  * blurRemoveCnt		: Number of pixels that get removed from the detected border to cut away blur (default 1)
	///  * mode 				: Border detection mode (values=default,classic,osd)
	"blackborderdetector" : 
	{
		"enable" : false,
		"threshold" : 0.01,
		"unknownFrameCnt" : 600,
		"borderFrameCnt" : 50,
		"maxInconsistentCnt" : 10,
		"blurRemoveCnt" : 1,
		"mode" : "default"
	},

	/// The configuration of the effect engine, contains the following items: 
	///  * paths		: An array with absolute location(s) of directories with effects 
	///  * color 		: Set static color after boot -> set effect to "" (empty) and input the values [R,G,B] and set duration_ms NOT to 0 (use 1) instead 
	///  * effect 		: The effect selected as 'boot sequence' 
	///  * duration_ms	: The duration of the selected effect (0=endless) 
	///  * priority 	: The priority of the selected effect/static color (default=990) HINT: lower value result in HIGHER priority! 
	"effects" : 
	{
		"paths" : 
		[
			"/opt/hyperion/effects"
		]
	},
	
	/// The configuration of the Json server which enables the json remote interface
	///  * port : Port at which the json server is started
	"jsonServer" : 
	{
		"port" : 19446
	},

	/// The configuration of the Proto server which enables the protobuffer remote interface
	///  * port : Port at which the protobuffer server is started
	"protoServer" : 
	{
		"port" : 19447
	},

	///  The configuration for each individual led. This contains the specification of the area 
	///  averaged of an input image for each led to determine its color. Each item in the list 
	///  contains the following fields:
	///  * index: The index of the led. This determines its location in the string of leds; zero 
	///           being the first led.
	///  * hscan: The fractional part of the image along the horizontal used for the averaging 
	///           (minimum and maximum inclusive)
	///  * vscan: The fractional part of the image along the vertical used for the averaging 
	///           (minimum and maximum inclusive)
	"leds" : 
	[
        {
            "index" : 0,
            "hscan" : { "minimum" : 0.0000, "maximum" : 1.0000 },
            "vscan" : { "minimum" : 0.0000, "maximum" : 1.0000 }
        }
	],

	"endOfJson" : "endOfJson"
}